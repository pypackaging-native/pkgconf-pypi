# SPDX-FileCopyrightText: 2024 The pypackaging-native developers
#
# SPDX-License-Identifier: MIT

[build-system]
backend-path = ['src']
# build-backend = 'mesonpy'
# requires = ['meson-python']
build-backend = 'buildhack'
requires = ['meson-python', 'wheel']

[project]
authors = [
  {name = 'Ralf Gommers', email = 'ralf.gommers@gmail.com'},
  {name = 'Filipe LaÃ­ns', email = 'lains@riseup.net'}
]
classifiers = [
  'Development Status :: 4 - Beta',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'License :: OSI Approved :: ISC License (ISCL)',
  'Programming Language :: C',
  'Topic :: Software Development',
  'Operating System :: Microsoft :: Windows',
  'Operating System :: POSIX',
  'Operating System :: Unix',
  'Operating System :: MacOS'
]
description = '`pkgconf` is a program which helps with discovering library dependencies and configuring compiler and linker flags.'
license = {file = 'LICENSE'}
name = 'pkgconf'
readme = 'README.md'
version = '2.1.1-7'

[project.optional-dependencies]
docs = [
  'sphinx ~= 7.0',
  'furo',
  'sphinx-design'
]
test = [
  'pytest',
  'meson-python',
  'environment-helpers >= 0.1.1.post1',
  'pytest-mock >= 2'
]

[project.scripts]
pkg-config = 'pkgconf:_entrypoint'
pkgconf = 'pkgconf:_entrypoint'

[project.urls]
homepage = 'https://pkgconf-pypi.readthedocs.io/en/latest/'
issues = 'https://github.com/pypackaging-native/pkgconf-pypi/issues'
source = 'https://github.com/pypackaging-native/pkgconf-pypi'

[tool.cibuildwheel]
# Build is Python-independent, so we select a single Python version (doesn't
# matter which one) to ensure we get one build per platform
build = 'cp311-*'

[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET = '10.9'

[tool.cibuildwheel.windows]
config-settings = 'setup-args=--vsenv build-dir=build'

[tool.meson-python.args]
install = ['--tags=python-runtime']
setup = ['--prefix=/build']

[tool.mypy]
files = 'src'
python_version = '3.8'
show_error_codes = true
strict = true

[tool.ruff]
line-length = 127
src = ['src']

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint]
extend-select = [
  'B',  # flake8-bugbear
  'C4',  # flake8-comprehensions
  'C9',  # mccabe
  'I',  # isort
  'PGH',  # pygrep-hooks
  'RUF',  # ruff
  'UP',  # pyupgrade
  'W',  # pycodestyle
  'YTT',  # flake8-2020
  'TRY',  # tryceratops
  'EM'  # flake8-errmsg
]

[tool.ruff.lint.isort]
lines-after-imports = 2
lines-between-types = 1
